name: E2E on Vercel Preview

on:
  workflow_dispatch:
    inputs:
      explicit_url:
        description: "Optional explicit base URL to test (e.g. https://near-intents-git-pr-123.vercel.app)"
        required: false
        type: string
      e2e_repo:
        description: "E2E tests repo to checkout"
        required: false
        default: "defuse-protocol/e2e-tests"
        type: string
      e2e_ref:
        description: "Ref of the E2E repo to checkout"
        required: false
        default: "custom-url"
        type: string
      test_command:
        description: "Command to run tests"
        required: false
        default: "yarn test-near-intents"
        type: string
      deployment_environment:
        description: "Deployment environment to wait for (Vercel)"
        required: false
        default: "Preview"
        type: string

jobs:
  e2e:
    name: Run E2E against Vercel Preview
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
      actions: read
    steps:
      - name: Resolve preview URL (use input if provided)
        id: resolve_url
        run: |
          if [ -n "${{ inputs.explicit_url }}" ]; then
            echo "base_url=${{ inputs.explicit_url }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "No explicit_url provided. Will wait for a Vercel ${{ inputs.deployment_environment }} deployment on this commit."
      - name: Wait for Vercel GitHub Deployment and read its URL
        id: wait_vercel
        if: steps.resolve_url.outputs.base_url == ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha = context.payload.pull_request?.head?.sha || context.sha;
            const targetEnv = core.getInput('deployment_environment') || 'Preview';
            const timeoutMs = 15 * 60 * 1000; // 15 minutes
            const intervalMs = 10000; // 10s
            const started = Date.now();
            core.info(`Waiting for GitHub deployment from Vercel on ${sha} (env=${targetEnv})...`);
            async function findDeployment() {
              const { data: deployments } = await github.rest.repos.listDeployments({ owner, repo, sha, per_page: 50 });
              const deployment = deployments.find(d => (d.environment || '').toLowerCase() === targetEnv.toLowerCase());
              return deployment || null;
            }
            async function getSuccessUrl(deploymentId) {
              const { data: statuses } = await github.rest.repos.listDeploymentStatuses({ owner, repo, deployment_id: deploymentId, per_page: 50 });
              const success = statuses.find(s => s.state === 'success' && s.environment_url);
              return success?.environment_url || null;
            }
            let url = null;
            while (Date.now() - started < timeoutMs) {
              const deployment = await findDeployment();
              if (deployment) {
                const envUrl = await getSuccessUrl(deployment.id);
                if (envUrl) { url = envUrl; break; }
              }
              await new Promise(r => setTimeout(r, intervalMs));
            }
            if (!url) {
              core.setFailed(`Timed out waiting for ${targetEnv} deployment URL.`);
              return;
            }
            core.info(`Resolved preview URL: ${url}`);
            core.setOutput('base_url', url);
      - name: Set BASE URL env
        run: |
          echo "E2E_BASE_URL_NEAR_INTENTS=${{ steps.resolve_url.outputs.base_url || steps.wait_vercel.outputs.base_url }}" >> $GITHUB_ENV
      - name: Checkout E2E repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.e2e_repo }}
          ref: ${{ inputs.e2e_ref }}
          path: e2e
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'
          cache-dependency-path: e2e/yarn.lock
      - name: Install dependencies
        working-directory: e2e
        run: |
          yarn install --frozen-lockfile
          yarn playwright install --with-deps
      - name: Run tests
        working-directory: e2e
        env:
          E2E_BASE_URL_NEAR_INTENTS: ${{ env.E2E_BASE_URL_NEAR_INTENTS }}
          RUN_TAG: CI
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          MANUAL_TRIGGER: 'false'
          MM_PASSWORD: ${{ secrets.MM_PASSWORD }}
          MM_SEED_PHRASE: ${{ secrets.MM_SEED_PHRASE }}
          NEAR_ACCOUNT_TOKEN: ${{ secrets.NEAR_ACCOUNT_TOKEN }}
        run: ${{ inputs.test_command }}
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: e2e/playwright-report
          if-no-files-found: ignore
